/*Query 1 - query used for first insight */
SELECT rental_month, total_rentals, active_customers,
      (total_rentals/active_customers) AS avg_rentals_per_customer
FROM
	(SELECT DATE_TRUNC ('month', rental_date) AS rental_month, 
	COUNT (r.rental_id) AS total_rentals, 
	COUNT(DISTINCT c.customer_id) AS active_customers
	FROM rental r
	JOIN customer c
	ON r.customer_id = c.customer_id
	GROUP BY 1
	ORDER BY 1) sub;


/*Query 2 - query used for second insight */
WITH T1 AS 
    (SELECT rental_date, actor_id, actor_name, rentals, 
     LAG(rentals)OVER(PARTITION BY actor_id ORDER BY rental_date) AS lag
     FROM
	(SELECT DATE_TRUNC ('month', r.rental_date) AS rental_date, a.actor_id, 
	 a.first_name|| ' ' ||a.last_name AS Actor_name, COUNT(*) AS rentals
	 FROM actor a
	 JOIN film_actor fa
	 ON a.actor_id = fa.actor_id
	 JOIN film f
	 ON fa.film_id = f.film_id
	 JOIN inventory i
	 ON f.film_id = i.film_id
	 JOIN rental r
	 ON i.inventory_id = r.inventory_id
	 WHERE DATE_TRUNC ('month', r.rental_date) BETWEEN '2005-06-01' AND '2005-07-31'
	 GROUP BY 1,2
	 ORDER BY 2) sub
      ORDER BY 2, 1),

T2 AS 
    (SELECT rental_date, actor_id, actor_name, rentals, lag, 
     COALESCE (rental_gain, 0.00) AS rental_gain
     FROM
	(SELECT rental_date, actor_id, actor_name, rentals, lag, (rentals - lag) AS rental_gain
	 FROM T1) sub)

SELECT T2.actor_id, T2.actor_name, T2.rentals AS July_rentals, 
       T2.lag AS June_rentals, T2.rental_gain
FROM T2
ORDER BY 3 DESC
LIMIT 5;


/*Query 3 - query used for third insight */
WITH T1 AS 
    (SELECT customer_id, 
     CASE WHEN number_of_rentals >= 40 THEN 'Tier 1 - 40+ rentals' 
     WHEN number_of_rentals < 40 AND number_of_rentals >= 30 THEN 'Tier 2 - 30+ rentals' 
     WHEN number_of_rentals < 30 AND number_of_rentals >= 20 THEN 'Tier 3 - 20+ rentals' 
     WHEN number_of_rentals < 20 AND number_of_rentals >= 10 THEN 'Tier 4 - 10+ rentals' 
     ELSE 'Tier 5 - 1+ rentals' END AS lifetime_rentals
     FROM
	(SELECT c.customer_id, COUNT(*) AS number_of_rentals
	 FROM rental r
	 JOIN customer c
	 ON r.customer_id = c.customer_id
	 GROUP BY 1
	 ORDER BY 2 DESC) sub )

SELECT lifetime_rentals, COUNT(*) AS customers_in_tier
FROM T1
GROUP BY 1
ORDER BY 1;



/*Query 4 - query used for fourth insight */
WITH T1 AS 
    (SELECT DISTINCT f.title AS film_title_ancient, SUM(p.amount) AS Total_rental_sales_ancient
     FROM film f
     JOIN inventory i
     ON f.film_id = i.film_id
     JOIN rental r
     ON i.inventory_id = r.inventory_id
     JOIN payment p
     ON r.rental_id = p.rental_id
     WHERE description LIKE '%Ancient%'
     GROUP BY 1
     ORDER BY 2 DESC),

T2 AS 
    (SELECT film_title, COALESCE (sales_per_title, '0.00') AS Total_rental_sales
     FROM
	(SELECT DISTINCT f.title AS film_title, SUM(p.amount) AS sales_per_title
	 FROM film f
	 LEFT JOIN inventory i
	 ON f.film_id = i.film_id
	 LEFT JOIN rental r
	 ON i.inventory_id = r.inventory_id
	 LEFT JOIN payment p
	 ON r.rental_id = p.rental_id
	 GROUP BY 1) sub
     ORDER BY 1)

SELECT COUNT(t1.film_title_ancient) AS films_feat_ancient, 
       SUM(total_rental_sales_ancient) AS Total_ancient_sales, 
       AVG(t1.Total_rental_sales_ancient) Avg_sales_per_title_ancient, 
       COUNT(t2.film_title) AS Total_Films, 
       SUM(total_rental_sales) AS total_sales, 
       AVG(T2.Total_rental_sales) AS avg_sales_per_title
FROM T1
RIGHT JOIN T2
ON t1.film_title_ancient = t2.film_title;